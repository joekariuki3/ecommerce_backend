#!/bin/bash
# Pre-commit hook to run code quality and security checks on Python files.
# This script uses ruff, black, isort, bandit, and safety.
# To enable this hook, save this file as .git/hooks/pre-commit and make it executable.
# chmod +x .git/hooks/pre-commit


echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Flag to track if any check fails
FAILED=0

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✅ $2${NC}"
    else
        echo -e "${RED}❌ $2${NC}"
        FAILED=1
    fi
}

# Check if required tools are installed
check_tool() {
    if ! command -v $1 &> /dev/null; then
        echo -e "${RED}❌ $1 is not installed. Please install it first.${NC}"
        echo -e "${YELLOW} You can install it via uv tools install $1${NC}"
        exit 1
    fi
}

# Check for required tools
echo "🔧 Checking required tools..."
check_tool "ruff"
check_tool "black"
check_tool "isort"
check_tool "bandit"
check_tool "safety"

# Get list of Python files being committed
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' | tr '\n' ' ')

if [ -z "$PYTHON_FILES" ]; then
    echo -e "${YELLOW}ℹ️  No Python files to check${NC}"
    exit 0
fi

echo "📝 Checking Python files: $PYTHON_FILES"

# Run Ruff linting
echo ""
echo "🔍 Running Ruff lint check..."
ruff check $PYTHON_FILES
print_status $? "Ruff lint check"

# Run Black formatting check
echo ""
echo "🎨 Running Black format check..."
black --check $PYTHON_FILES
print_status $? "Black format check"

# Run isort import sorting check
echo ""
echo "📦 Running isort import check..."
isort --check-only $PYTHON_FILES
print_status $? "isort import check"

# Run Bandit security check
echo ""
echo "🔒 Running Bandit security check..."
bandit -c pyproject.toml --quiet $PYTHON_FILES
print_status $? "Bandit security check"

# Run Safety dependency check
echo ""
echo "🛡️  Running Safety dependency check..."
SAFETY_OUTPUT=$(safety scan --short-report 2>&1)
SAFETY_EXIT_CODE=$?

if [ $SAFETY_EXIT_CODE -eq 0 ]; then
    print_status 0 "Safety dependency check"
else
    echo "Safety vulnerabilities found:"
    echo "$SAFETY_OUTPUT"
    print_status 1 "Safety dependency check"
fi

# Final result
echo ""
if [ $FAILED -eq 1 ]; then
    echo -e "${RED}💥 Pre-commit checks failed!${NC}"
    echo -e "${YELLOW}💡 Fix the issues above or use 'git commit --no-verify' to skip checks${NC}"
    exit 1
else
    echo -e "${GREEN}🎉 All pre-commit checks passed!${NC}"
    exit 0
fi